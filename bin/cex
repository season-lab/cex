#!/usr/bin/env python3

import networkx as nx
import argparse
import sys
import os

try:
    from cex import CEX
except:
    sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__)), ".."))
    from cex import CEX

def get_plugins():
    cex = CEX()
    return "Plugins: " + " ".join(cex.pm.get_plugin_names())

def dump_dot_cg(addr, graph, outdir=None):
    dot = CEX.to_dot(graph)
    if outdir is None:
        print(dot)
        return

    if addr is None:
        addr = "complete"
    with open(os.path.join(outdir, "cg-%s.dot" % addr), "w") as fout:
        fout.write(dot)

def dump_json_cg(addr, graph, outdir=None):
    g_json = CEX.to_json(graph)
    if outdir is None:
        print(g_json)
        return

    if addr is None:
        addr = "complete"
    with open(os.path.join(outdir, "cg-%s.json" % addr), "w") as fout:
        fout.write(g_json)

def dump_dot_cfg(addr, graph, outdir=None):
    dot = CEX.to_dot(graph)
    if outdir is None:
        print(dot)
        return

    with open(os.path.join(outdir, "cfg-%s.dot" % addr), "w") as fout:
        fout.write(dot)

def dump_json_cfg(addr, graph, outdir=None):
    g_json = CEX.to_json(graph)
    if outdir is None:
        print(g_json)
        return

    with open(os.path.join(outdir, "cfg-%s.json" % addr), "w") as fout:
        fout.write(g_json)

def dump_dot_path(graph, outdir=None):
    dot = CEX.to_dot(graph)
    if outdir is None:
        print(dot)
        return

    with open(os.path.join(outdir, "path-%s.dot" % addr), "w") as fout:
        fout.write(dot)

def to_num(addr):
    if addr[:2] == "0x":
        return int(addr, 16)
    return int(addr)

def pair_type(arg):
    try:
        v1, v2 = arg.split(',')
        v1 = int(v1, 16) if v1[:2] == "0x" else int(v1)
        v2 = int(v2, 16) if v2[:2] == "0x" else int(v2)
    except:
        raise argparse.ArgumentError("Expected a pair of integers")
    return (v1, v2)

def main(args):
    cex = CEX()

    plugins = None
    if args.use_plugins is not None:
        plugins = args.use_plugins

    binary    = args.binary
    cgs_dot   = args.dump_dot_cg or []
    cfgs_dot  = args.dump_dot_cfg or []
    cgs_json  = args.dump_json_cg or []
    cfgs_json = args.dump_json_cfg or []
    for cg_addr in cgs_dot:
        if cg_addr == "-":
            cg_addr = None
        else:
            cg_addr = to_num(cg_addr)
        graph = cex.get_callgraph(binary, cg_addr, plugins)
        dump_dot_cg(cg_addr, graph, args.output)

    for cg_addr in cgs_json:
        if cg_addr == "-":
            cg_addr = None
        else:
            cg_addr = to_num(cg_addr)
        graph = cex.get_callgraph(binary, cg_addr, plugins)
        dump_json_cg(cg_addr, graph, args.output)

    for cfg_addr in cfgs_dot:
        graph = cex.get_cfg(binary, to_num(cfg_addr), plugins)
        dump_dot_cfg(cfg_addr, graph, args.output)

    for cfg_addr in cfgs_json:
        graph = cex.get_cfg(binary, to_num(cfg_addr), plugins)
        dump_json_cfg(cfg_addr, graph, args.output)

    if args.find_path is not None:
        src, dst = args.find_path
        path = cex.find_path(binary, src, dst, plugins)
        if args.dump_dot_path:
            g = nx.DiGraph()
            for i in range(len(path) - 1):
                src = path[i]
                dst = path[i+1]
                g.add_node(src.addr, data=src)
                g.add_node(dst.addr, data=dst)
                g.add_edge(src.addr, dst.addr)
            dump_dot_path(g, args.output)
        elif len(path) > 0:
            print("Path found")
        else:
            print("Path not found")

    return 0

if __name__=="__main__":
    parser = argparse.ArgumentParser(description='Cfg EXtractor')
    parser.add_argument("--list-plugins", help="Print the installed plugins", action="version", version=get_plugins())
    parser.add_argument("--use-plugins", metavar="PLUGIN", help="Comma separated list of plugins to use. If omitted, use %s." % CEX.default_plugin, nargs="*")
    parser.add_argument("--output", metavar="DIRECTORY", help="Output directory. If omitted, stdout")
    parser.add_argument("--dump-dot-cg", metavar="ADDR", help="Dump the callgraph in dot from ADDR entrypoint. If '-', program entrypoint.", nargs="*")
    parser.add_argument("--dump-json-cg", metavar="ADDR", help="Dump the callgraph in json from ADDR entrypoint. If '-', program entrypoint.", nargs="*")
    parser.add_argument("--dump-dot-cfg", metavar="ADDR", help="Dump the control flow graph of the function in dot at address ADDR", nargs="*")
    parser.add_argument("--dump-json-cfg", metavar="ADDR", help="Dump the control flow graph of the function in json at address ADDR", nargs="*")
    parser.add_argument("--find-path", metavar="ADDR1,ADDR2", type=pair_type, help="Find a path between the two functions at ADDR1 and ADDR2", nargs="?")
    parser.add_argument("--dump-dot-path", help="Dump the path found by --find-path in dot format", default=False, action="store_true")
    parser.add_argument("binary", help="The binary to analyze")

    args = parser.parse_args()

    exit(main(args))
